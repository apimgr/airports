# Production Docker Compose Configuration
# Uses ./rootfs for persistent storage

services:
  airports:
    image: ghcr.io/apimgr/airports:latest
    container_name: airports
    restart: unless-stopped

    environment:
      - CONFIG_DIR=/config
      - DATA_DIR=/data
      - LOGS_DIR=/logs
      # Server configuration
      - PORT=80
      - ADDRESS=0.0.0.0
      - DATABASE_URL=sqlite:/data/airports.db
      # Uncomment and set for first deployment
      #- ADMIN_USER=administrator
      #- ADMIN_PASSWORD=changeme
      #- ADMIN_TOKEN=your-token-here

    volumes:
      # Production: Persistent storage in ./rootfs
      - ./rootfs/config/airports:/config
      - ./rootfs/data/airports:/data
      - ./rootfs/logs/airports:/logs

    ports:
      - "127.0.0.1:64180:80"

    networks:
      - airports

    healthcheck:
      test: ["CMD", "/airports", "--status"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Optional: PostgreSQL database
  # Uncomment if using external database
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: airports-postgres
  #   restart: unless-stopped
  #
  #   environment:
  #     POSTGRES_DB: airports
  #     POSTGRES_USER: airports
  #     POSTGRES_PASSWORD: changeme
  #
  #   volumes:
  #     - ./rootfs/db/postgres:/var/lib/postgresql/data
  #
  #   networks:
  #     - airports
  #
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U airports"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Optional: MySQL/MariaDB database
  # mysql:
  #   image: mariadb:11-alpine
  #   container_name: airports-mysql
  #   restart: unless-stopped
  #
  #   environment:
  #     MYSQL_DATABASE: airports
  #     MYSQL_USER: airports
  #     MYSQL_PASSWORD: changeme
  #     MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  #
  #   volumes:
  #     - ./rootfs/db/mysql:/var/lib/mysql
  #
  #   networks:
  #     - airports
  #
  #   healthcheck:
  #     test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  airports:
    name: airports
    external: false
    driver: bridge

